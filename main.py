# main.py
import os
import json
import re
import random
import datetime
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)
from telegram.constants import ParseMode

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–π–¥–∏ –≤ Railway ‚Üí Variables ‚Üí –¥–æ–±–∞–≤—å TOKEN.")

PROXY_URL = ""
DATA_FILE = "babies.json"
EVENTS_FILE = "events.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
BABIES = []
EVENTS = []

# === –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
def load_babies():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data if isinstance(data, list) else [{"name": k, "birth": v} for k, v in data.items()]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {DATA_FILE}: {e}")
    return []

def load_events():
    if os.path.exists(EVENTS_FILE):
        try:
            with open(EVENTS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {EVENTS_FILE}: {e}")
    return []

def save_babies(data):
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

def save_events(data):
    try:
        with open(EVENTS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# === –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–ï ===
def escape_md(text: str) -> str:
    if not text:
        return ""
    for ch in r'_*[]()~`>#+-=|{}.!':
        text = text.replace(ch, f'\\{ch}')
    return text

# === –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ú–ï–ù–ò ===
def normalize_name(name: str) -> str:
    return ' '.join(word.capitalize() for word in name.lstrip('+-').strip().split())

# === –ê–ù–¢–ò–ú–ê–¢ ===
BAD_WORDS = ['–±–ª—è', '—Å—É–∫–∞', '—Ö—É–π', '–ø–∏–∑–¥', '–µ–±–∞–Ω', '—ë–±–∞–Ω', '–º—É–¥–∞–∫', '–∏–¥–∏–æ—Ç', '–Ω–∞—Ö', '–±–ª—è—Ç—å']
TIRED_WORDS = ['—É—Å—Ç–∞–ª–∞', '–ø–ª–æ—Ö–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ç—è–∂–µ–ª–æ', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ –º–æ–≥—É']

def contains_bad_word(text: str) -> bool:
    if not text:
        return False
    text = text.lower()
    for k, v in {'0': '–æ', '@': '–∞', '3': '–∑', '.': '', ' ': ''}.items():
        text = text.replace(k, v)
    return any(re.search(rf'\b{re.escape(word)}', text) for word in BAD_WORDS)

def contains_tired(text: str) -> bool:
    return any(w in text.lower() for w in TIRED_WORDS)

# === –°–û–û–ë–©–ï–ù–ò–Ø ===
TIPS = [
    "üçº *–°–æ–≤–µ—Ç –¥–Ω—è:* –ü—Ä–∏ –≥—Ä—É–¥–Ω–æ–º –≤—Å–∫–∞—Ä–º–ª–∏–≤–∞–Ω–∏–∏ –ø–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã.",
    "üò¥ *–°–æ–≤–µ—Ç –¥–Ω—è:* –õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –ø–æ—Ä–∞–Ω—å—à–µ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ!",
    "üß∏ *–°–æ–≤–µ—Ç –¥–Ω—è:* –£–¥–µ–ª—è–π—Ç–µ —Å–µ–±–µ 15 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.",
    "üìö *–°–æ–≤–µ—Ç –¥–Ω—è:* –ß–∏—Ç–∞–π—Ç–µ —Å –º–∞–ª—ã—à–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
    "ü•¶ *–°–æ–≤–µ—Ç –¥–Ω—è:* –ï—à—å—Ç–µ –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤.",
    "üíï *–°–æ–≤–µ—Ç –¥–Ω—è:* –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏.",
    "üß† *–°–æ–≤–µ—Ç –¥–Ω—è:* –ú–∞–ª—ã—à —É—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —ç–º–æ—Ü–∏—è—Ö ‚Äî —É–ª—ã–±–∞–π—Ç–µ—Å—å!",
    "üßº *–°–æ–≤–µ—Ç –¥–Ω—è:* –ú–æ–π—Ç–µ —Ä—É–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ—Ä–º–ª–µ–Ω–∏–µ–º.",
    "üåü *–°–æ–≤–µ—Ç –¥–Ω—è:* –û—Ç–º–µ—á–∞–π—Ç–µ –∫–∞–∂–¥—É—é –ø–æ–±–µ–¥—É!",
    "üìû *–°–æ–≤–µ—Ç –¥–Ω—è:* –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é, –µ—Å–ª–∏ —Ç—è–∂–µ–ª–æ."
]

MOTIVATIONAL = [
    "üå∏ *–¢—ã ‚Äî —Å—É–ø–µ—Ä–º–∞–º–∞! –î–µ—Ä–∂–∏—Å—å, –≤—Å—ë –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!*",
    "üíñ *–ü–æ–º–Ω–∏: —Ç—ã –Ω–µ –æ–¥–Ω–∞. –ú—ã —Ä—è–¥–æ–º!*",
    "üåü *–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!*"
]

# === –ú–ï–ù–Æ ===
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π", callback_data='list_babies')],
        [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç –¥–Ω—è", callback_data='tip')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üéÇ –ë–ª–∏–∂–∞–π—à–∏–µ –î–†", callback_data='birthdays')],
        [InlineKeyboardButton("üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data='calendar')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'list_babies':
        if not BABIES:
            await query.edit_message_text("üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return
        text = "*üë∂ –ù–∞—à–∏ –º–∞–ª—ã—à–∏:*\n\n"
        now = datetime.datetime.now(pytz.timezone('Asia/Krasnoyarsk')).date()
        for b in sorted(BABIES, key=lambda x: x["name"]):
            name = b["name"]
            birth = datetime.datetime.strptime(b["birth"], "%Y-%m-%d").date()
            m = (now.year - birth.year) * 12 + (now.month - birth.month)
            if now.day < birth.day:
                m -= 1
            age = f"{m} –º–µ—Å." if m < 12 else f"{m // 12} –≥." + (f" {m % 12} –º–µ—Å." if m % 12 else "")
            text += f"‚Ä¢ *{name}* ‚Äî {birth.strftime('%d.%m.%Y')} ({age})\n"
        await query.edit_message_text(escape_md(text), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'tip':
        await query.edit_message_text(escape_md(random.choice(TIPS)), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'stats':
        if not BABIES:
            text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        else:
            now = datetime.datetime.now(pytz.timezone('Asia/Krasnoyarsk')).date()
            groups = {"0-3": 0, "4-6": 0, "7-9": 0, "10-12": 0, "1-2 –≥": 0, "2+ –≥": 0}
            for b in BABIES:
                try:
                    bd = datetime.datetime.strptime(b["birth"], "%Y-%m-%d").date()
                    m = (now.year - bd.year) * 12 + (now.month - bd.month)
                    if now.day < bd.day:
                        m -= 1
                    if m < 4: groups["0-3"] += 1
                    elif m < 7: groups["4-6"] += 1
                    elif m < 10: groups["7-9"] += 1
                    elif m < 13: groups["10-12"] += 1
                    elif m < 25: groups["1-2 –≥"] += 1
                    else: groups["2+ –≥"] += 1
                except: pass
            text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n" + "\n".join(f"‚Ä¢ {k}: {v}" for k, v in groups.items() if v > 0)
        await query.edit_message_text(escape_md(text), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'birthdays':
        now = datetime.datetime.now(pytz.timezone('Asia/Krasnoyarsk')).date()
        upcoming = []
        for b in BABIES:
            try:
                name = b["name"]
                bd = datetime.datetime.strptime(b["birth"], "%Y-%m-%d").date()
                next_bday = bd.replace(year=now.year) if bd.replace(year=now.year) >= now else bd.replace(year=now.year + 1)
                days = (next_bday - now).days
                if 0 <= days <= 30:
                    upcoming.append((name, next_bday, days))
            except: pass
        upcoming.sort(key=lambda x: x[2])
        text = "*üéÇ –ë–ª–∏–∂–∞–π—à–∏–µ –î–† (30 –¥–Ω–µ–π):*\n\n"
        text += "\n".join(
            f"‚Ä¢ *{n}* ‚Äî {d.strftime('%d.%m')} ({'—Å–µ–≥–æ–¥–Ω—è' if da==0 else '–∑–∞–≤—Ç—Ä–∞' if da==1 else f'—á–µ—Ä–µ–∑ {da} –¥–Ω.'})"
            for n, d, da in upcoming
        ) if upcoming else "–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–∞–∑–¥–Ω—É–µ—Ç."
        await query.edit_message_text(escape_md(text), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'calendar':
        now = datetime.datetime.now(pytz.timezone('Asia/Krasnoyarsk')).date()
        upcoming = []
        for e in EVENTS:
            try:
                title = e["title"]
                date_str = e["date"]
                ed = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
                days = (ed - now).days
                if 0 <= days <= 14:
                    upcoming.append((title, ed, days))
            except: pass
        upcoming.sort(key=lambda x: x[2])
        text = "*üóì –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è (14 –¥–Ω–µ–π):*\n\n"
        text += "\n".join(
            f"‚Ä¢ *{t}* ‚Äî {d.strftime('%d.%m.%Y')} ({'—Å–µ–≥–æ–¥–Ω—è' if da==0 else '–∑–∞–≤—Ç—Ä–∞' if da==1 else f'—á–µ—Ä–µ–∑ {da} –¥–Ω.'})"
            for t, d, da in upcoming
        ) if upcoming else "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π."
        await query.edit_message_text(escape_md(text), parse_mode=ParseMode.MARKDOWN_V2)

    elif data == 'help':
        help_text = (
            "ü§ñ *–ü–æ–º–æ—â—å:*\n\n"
            "/menu ‚Äî –ú–µ–Ω—é\n"
            "/tip ‚Äî –°–æ–≤–µ—Ç –¥–Ω—è\n"
            "/ustala ‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "*–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—ë–Ω–∫–∞:* `+–ò–º—è –¥–¥.–º–º.–≥–≥–≥–≥`\n"
            "–ü—Ä–∏–º–µ—Ä: `+–ú–∞—à–∞ 15.03.2024`\n\n"
            "*–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ:* `!—Å–æ–±—ã—Ç–∏–µ –ü—Ä–∏–≤–∏–≤–∫–∞ 20.03.2025`\n\n"
            "*–£–¥–∞–ª–∏—Ç—å:* `-–ò–º—è` (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"
        )
        await query.edit_message_text(escape_md(help_text), parse_mode=ParseMode.MARKDOWN_V2)

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï/–£–î–ê–õ–ï–ù–ò–ï ===
async def check_baby_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text: return
    text = msg.text.strip()

    if text.startswith('+'):
        match = re.search(r'\b(\d{2})\.(\d{2})\.(\d{4})\b$', text)
        if not match: return
        date_str = match.group(0)
        name = normalize_name(text[1:match.start()].strip())
        if not name: return
        try:
            birth = datetime.datetime.strptime(date_str, "%d.%m.%Y")
            BABIES.append({"name": name, "birth": birth.strftime("%Y-%m-%d")})
            save_babies(BABIES)
            await msg.reply_text(escape_md(f"‚úÖ *{name}* –¥–æ–±–∞–≤–ª–µ–Ω! –î–∞—Ç–∞: {date_str}"), parse_mode=ParseMode.MARKDOWN_V2)
        except: await msg.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞—Ç—ã.")

    elif text.startswith('-'):
        user_id = msg.from_user.id
        chat_id = msg.chat_id
        try:
            member = await context.bot.get_chat_member(chat_id, user_id)
            is_admin = member.status in ['administrator', 'creator']
        except: is_admin = False
        if not is_admin:
            await msg.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å.")
            return
        name = normalize_name(text[1:].strip())
        found = False
        for i, b in enumerate(BABIES):
            if b["name"] == name:
                del BABIES[i]
                save_babies(BABIES)
                await msg.reply_text(escape_md(f"‚úÖ *{name}* —É–¥–∞–ª—ë–Ω."), parse_mode=ParseMode.MARKDOWN_V2)
                found = True
                break
        if not found:
            await msg.reply_text(escape_md(f"‚ùå *{name}* –Ω–µ –Ω–∞–π–¥–µ–Ω."), parse_mode=ParseMode.MARKDOWN_V2)

# === –°–û–ë–´–¢–ò–Ø ===
async def check_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text: return
    text = msg.text.strip()
    if not text.startswith('!—Å–æ–±—ã—Ç–∏–µ '): return
    rest = text[10:].strip()
    match = re.search(r'\b(\d{2})\.(\d{2})\.(\d{4})\b$', rest)
    if not match: return
    date_str = match.group(0)
    title = rest[:match.start()].strip()
    if not title: return
    try:
        event_date = datetime.datetime.strptime(date_str, "%d.%m.%Y")
        EVENTS.append({"title": title, "date": event_date.strftime("%Y-%m-%d")})
        save_events(EVENTS)
        await msg.reply_text(escape_md(f"‚úÖ *{title}* –Ω–∞ {date_str} –¥–æ–±–∞–≤–ª–µ–Ω–æ!"), parse_mode=ParseMode.MARKDOWN_V2)
    except:
        await msg.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞—Ç—ã.")

# === –ü–û–î–î–ï–†–ñ–ö–ê –ò –ê–ù–¢–ò–ú–ê–¢ ===
async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.from_user or msg.from_user.is_bot: return
    text = (msg.text or msg.caption or "").lower()
    if contains_tired(text):
        await msg.reply_text(escape_md(random.choice(MOTIVATIONAL)), parse_mode=ParseMode.MARKDOWN_V2)
    elif contains_bad_word(text):
        try:
            await msg.delete()
            user = msg.from_user
            mention = f"@{user.username}" if user.username else user.first_name
            await context.bot.send_message(msg.chat_id, f"{mention}, –¥–∞–≤–∞–π—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ üôè")
        except: pass

# === –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ===
async def greet_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    for member in update.message.new_chat_members:
        if member.is_bot: continue
        try:
            await context.bot.send_message(
                update.effective_chat.id,
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {member.first_name}! üå∏\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ç—ë–ø–ª—ã–π —á–∞—Ç! üíñ"
            )
        except: pass

# === –ï–ñ–ï–î–ù–ï–í–ù–´–ï –ü–û–ó–î–†–ê–í–õ–ï–ù–ò–Ø ===
async def daily_birthday_check(context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = context.application.bot_data.get('main_chat_id')
        if not chat_id: return
        now = datetime.datetime.now(pytz.timezone('Asia/Krasnoyarsk')).date()
        greeted = context.application.bot_data.setdefault("greeted", set())
        new_greeted = set()

        for baby in BABIES:
            try:
                name = baby["name"]
                birth = datetime.datetime.strptime(baby["birth"], "%Y-%m-%d").date()
                months = (now.year - birth.year) * 12 + (now.month - birth.month)
                if now.day < birth.day:
                    months -= 1

                # –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
                if now.month == birth.month and now.day == birth.day:
                    years = now.year - birth.year
                    key = f"{name}_bday_{now}"
                    if key not in greeted:
                        await context.bot.send_message(
                            chat_id,
                            escape_md(f"üéâ –£—Ä–∞! –°–µ–≥–æ–¥–Ω—è *{name}* –ø—Ä–∞–∑–¥–Ω—É–µ—Ç *{years}* –ª–µ—Ç! üéÇ"),
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                        new_greeted.add(key)

                # –ú–µ—Å—è—Ü—ã
                if months >= 1:
                    key = f"{name}_month_{months}_{now}"
                    if key not in greeted:
                        msg = "–ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü ‚Äî –æ–≥—Ä–æ–º–Ω—ã–π —à–∞–≥! ü•≥" if months == 1 else \
                              "–ü–æ–ª–≥–æ–¥–∞ ‚Äî —É–∂–µ –ø–æ—á—Ç–∏ —Ö–æ–¥–∏—Ç! üö∂" if months == 6 else \
                              "–ü–µ—Ä–≤—ã–π –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è! üéâ" if months == 12 else \
                              "–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü ‚Äî –Ω–æ–≤—ã–µ –ø–æ–±–µ–¥—ã! üåü"
                        await context.bot.send_message(
                            chat_id,
                            escape_md(f"üë∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º *{name}* —Å *{months}* –º–µ—Å—è—Ü–µ–º –∂–∏–∑–Ω–∏! üéä\n\n{msg}"),
                            parse_mode=ParseMode.MARKDOWN_V2
                        )
                        new_greeted.add(key)

                # –ì–æ–¥—ã
                if months >= 12:
                    years = months // 12
                    if years >= 2:
                        key = f"{name}_year_{years}_{now}"
                        if key not in greeted:
                            await context.bot.send_message(
                                chat_id,
                                escape_md(f"üéà –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! *{name}* —É–∂–µ *{years}* –≥–æ–¥–∞(–ª–µ—Ç)! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –≥–æ–¥ –±—É–¥–µ—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã–º! üíñ"),
                                parse_mode=ParseMode.MARKDOWN_V2
                            )
                            new_greeted.add(key)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞: {e}")
        context.application.bot_data["greeted"] = new_greeted
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ daily: {e}")

# === –ó–ê–ü–£–°–ö ===
async def remember_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.application.bot_data['main_chat_id'] = update.effective_chat.id
    await show_menu(update, context)

def main():
    global BABIES, EVENTS
    BABIES = load_babies()
    EVENTS = load_events()

    app = Application.builder().token(TOKEN).build()
    app.bot_data['main_chat_id'] = None

    app.add_handler(CommandHandler("start", remember_chat))
    app.add_handler(CommandHandler("menu", remember_chat))
    app.add_handler(CommandHandler("tip", lambda u, c: u.message.reply_text(escape_md(random.choice(TIPS)), parse_mode=ParseMode.MARKDOWN_V2)))
    app.add_handler(CommandHandler("ustala", lambda u, c: u.message.reply_text(escape_md(random.choice(MOTIVATIONAL)), parse_mode=ParseMode.MARKDOWN_V2)))

    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_baby_commands), group=1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_event_command), group=1)
    app.add_handler(MessageHandler(filters.TEXT | filters.CAPTION, check_message), group=2)
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, greet_new_member), group=3)

    if app.job_queue:
        tz = pytz.timezone('Asia/Krasnoyarsk')
        app.job_queue.run_daily(daily_birthday_check, time=datetime.time(9, 0, tzinfo=tz))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –°–ª—É—à–∞—é —á–∞—Ç...")
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
